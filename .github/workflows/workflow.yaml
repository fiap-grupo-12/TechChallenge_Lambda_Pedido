name: 'Terraform'

on:
  push:
    branches: [ "main", "release/*" ]

permissions:
  pull-requests: read

jobs:
  Build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./src
        shell: bash

    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release

      - name: Test
        run: dotnet test /p:CollectCoverage=true --collect:"XPlat Code Coverage" --results-directory ./coverage -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover

  SonarCloud:
    needs: Build
    runs-on: windows-latest
    defaults:
      run:
        working-directory: ./src
    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'
      
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Cache SonarCloud packages
        uses: actions/cache@v4
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      
      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      
      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
      
      - name: Install dotnet-coverage
        # if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        run: |
          dotnet tool install --global dotnet-coverage

      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"soat-fiap_bmb.payment" /o:"soat-fiap" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"  /d:sonar.cs.vscoveragexml.reportsPaths=coverage.xml /d:sonar.inclusions=**/*.cs /d:sonar.scanner.scanAll=false /d:sonar.projectKey=fiap-grupo-12_TechChallenge_Lambda_Pedido /d:sonar.organization=fiap-grupo-12
          dotnet build --no-incremental
          dotnet-coverage collect "dotnet test" -f xml -o "coverage.xml"
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"


#            -Dsonar.cs.opencover.reportsPaths=coverage/**/coverage.opencover.xml

  Publish:
    needs: SonarCloud
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./src/FIAP.TechChallenge.LambdaPedido
        shell: bash

    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Install Amazon Lambda Tools
        run: dotnet tool install -g Amazon.Lambda.Tools
        
      - name: Publish Lambda Package
        run: dotnet lambda package --configuration Release --output-package ./lambda_pedido_function.zip

      - name: Configure AWS credentials
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Verificando se bucket está criado
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          BUCKET_NAME="code-lambdas-functions"
            REGION="us-east-1"

            if ! aws s3api head-bucket --bucket "$BUCKET_NAME" 2>/dev/null; then
              echo "Bucket não existe. Criando bucket..."
              aws s3api create-bucket --bucket "$BUCKET_NAME"
            else
              echo "Bucket validado. Processo de upload."
            fi

      - name: Upload to S3
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          BUCKET_NAME="code-lambdas-functions"
          aws s3api head-bucket --bucket "$BUCKET_NAME" || aws s3api create-bucket --bucket "$BUCKET_NAME"
          aws s3 cp lambda_pedido_function.zip s3://$BUCKET_NAME/

  CreateLambda: 
    needs: 'Publish'
    runs-on: ubuntu-latest 
    defaults:
      run:
        working-directory: ./infra
        shell: bash

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
        
    - name: Verificando se bucket está criado
      run: |
            BUCKET_NAME="terraform-tfstate-grupo12-fiap-2024"
            REGION="us-east-1"

            if ! aws s3api head-bucket --bucket "$BUCKET_NAME" 2>/dev/null; then
              echo "Bucket não existe. Criando bucket..."
              aws s3api create-bucket --bucket "$BUCKET_NAME"
            else
              echo "Bucket validado. Processo de upload."
            fi

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
    
    - name: Terraform Init
      run: terraform init

    - name: Terraform Format
      run: terraform fmt -check

    - name: Terraform Plan
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform plan -input=false

    - name: Apply Terraform
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve